---
- name: Create charts directory
  become: true
  ansible.builtin.file:
    path: /var/lib/yake/charts
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0755
    state: directory

- name: Sync helm charts
  ansible.posix.synchronize:
    src: "{{ clusterapi_cluster_charts_dir }}"
    dest: /var/lib/yake/charts/

- name: Copy clouds.yaml file
  ansible.builtin.template:
    src: clouds.yaml.j2
    dest: "/var/lib/yake/clouds.{{ clusterapi_cluster_name }}.yaml"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Slurp clouds.yaml file
  ansible.builtin.slurp:
    src: "/var/lib/yake/clouds.{{ clusterapi_cluster_name }}.yaml"
  register: result_clouds_yaml

- name: Set _clusterapi_cluster_cloud_yaml_b64 fact
  ansible.builtin.set_fact:
    _clusterapi_cluster_cloud_yaml_b64: "{{ result_clouds_yaml.content }}"

- name: Get SHA256 hash for the image
  uri:
    url: https://swift.services.a.regiocloud.tech/swift/v1/AUTH_b182637428444b9aa302bb8d5a5a418c/openstack-k8s-capi-images/ubuntu-2204-kube-{{ clusterapi_cluster_kubernetes_version_short }}/ubuntu-2204-kube-{{ clusterapi_cluster_kubernetes_version }}.qcow2.CHECKSUM
    return_content: yes
  register: image_hash_raw

- name: Get only the hash
  ansible.builtin.set_fact:
    clusterapi_cluster_image_hash: "{{ image_hash_raw.content.split()[0] }}"

- name: Copy secret template file
  ansible.builtin.template:
    src: cloud-secret.yaml.j2
    dest: /var/lib/yake/cloud-secret.yaml
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Copy image.yaml file
  ansible.builtin.template:
    src: image.yaml.j2
    dest: /var/lib/yake/image.{{ clusterapi_cluster_name }}.yaml
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Copy cluster template file
  ansible.builtin.copy:
    src: cluster-template.yaml
    dest: /var/lib/yake/cluster-template.yaml
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Create ssh keypair
  openstack.cloud.keypair:
    cloud: "{{ clusterapi_cluster_openstack_cloud }}"
    state: present
    name: "{{ clusterapi_cluster_ssh_key_name }}"
  register: result_keypair

- name: Write private ssh key
  ansible.builtin.copy:
    content: "{{ result_keypair.keypair.private_key }}"
    dest: "/var/lib/yake/id_rsa.{{ clusterapi_cluster_name }}"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644
  when: result_keypair.changed  # noqa no-handler

- name: Write public ssh key
  ansible.builtin.copy:
    content: "{{ result_keypair.keypair.public_key }}"
    dest: "/var/lib/yake/id_rsa.{{ clusterapi_cluster_name }}.pub"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644
  when: result_keypair.changed  # noqa no-handler

- name: Get external network ID
  openstack.cloud.networks_info:
    cloud: "{{ clusterapi_cluster_openstack_cloud }}"
    name: "{{ clusterapi_cluster_external_network }}"
  register: result_external_network

- name: Set _clusterapi_cluster_external_network fact
  ansible.builtin.set_fact:
    _clusterapi_cluster_external_network: "{{ result_external_network.networks | first | default({}) }}"

- name: Set _clusterapi_cluster_external_network_id fact
  ansible.builtin.set_fact:
    _clusterapi_cluster_external_network_id: "{{ _clusterapi_cluster_external_network.id | default('') }}"

- name: Combine clusterapi_cluster_defaults and clusterapi_cluster_extra
  ansible.builtin.set_fact:
    _clusterapi_cluster: "{{ clusterapi_cluster_defaults | combine(clusterapi_cluster_extra) }}"

- name: Copy cluster configuration file
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "/var/lib/yake/config.{{ clusterapi_cluster_name }}.yaml"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Generate manifest to create Kubernetes cluster
  become: "{{ clusterapi_cluster_become }}"
  ansible.builtin.shell: |
    /usr/local/bin/yake-clusterctl --config /var/lib/yake/config.{{ clusterapi_cluster_name }}.yaml generate cluster --from /var/lib/yake/cluster-template.yaml {{ clusterapi_cluster_name }} > /var/lib/yake/cluster.{{ clusterapi_cluster_name }}.yaml
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_kind_cluster_name }}"
  changed_when: false

- name: Create cloud secret
  kubernetes.core.k8s:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_kind_cluster_name }}"
    state: present
    wait: true
    src: "/var/lib/yake/cloud-secret.yaml"

- name: Check if image exists
  openstack.cloud.image_info:
    cloud: "{{ clusterapi_cluster_openstack_cloud }}"
    name: "{{ clusterapi_cluster_openstack_image_name }}"
  register: image_check

- name: Upload image to OpenStack
  when: not clusterapi_cluster_openstack_use_existing_image or image_check.images | length == 0
  kubernetes.core.k8s:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_kind_cluster_name }}"
    state: present
    wait: true
    src: "/var/lib/yake/image.{{ clusterapi_cluster_name }}.yaml"
  register: image_upload

- name: Wait untill the image is uploaded (can take a long time)
  openstack.cloud.image_info:
    cloud: "{{ clusterapi_cluster_openstack_cloud }}"
    name: "{{ clusterapi_cluster_openstack_image_name }}"
  register: uploaded_image
  until: uploaded_image.images[0].status == "active"
  retries: 60
  delay: 60
  when: image_check.images | length == 0

- name: Create Kubernetes cluster
  kubernetes.core.k8s:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_kind_cluster_name }}"
    state: present
    wait: true
    src: "/var/lib/yake/cluster.{{ clusterapi_cluster_name }}.yaml"

- name: Get kubeconfig
  ansible.builtin.command: "yake-clusterctl get kubeconfig {{ clusterapi_cluster_name }}"
  register: result_kubeconfig
  changed_when: false
  until: result_kubeconfig.rc == 0
  environment:
    KUBECONFIG: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_kind_cluster_name }}"
  retries: 30
  delay: 10

- name: Write kubeconfig
  ansible.builtin.copy:
    content: "{{ result_kubeconfig.stdout }}"
    dest: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Wait for Kubernetes API
  kubernetes.core.k8s_info:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    kind: Node
  register: result_k8s_nodes
  until: result_k8s_nodes.resources is defined
  retries: 60
  delay: 10

- name: Include network tasks
  ansible.builtin.include_tasks: "network-{{ clusterapi_cluster_network }}.yml"

- name: Copy cloud.conf file
  ansible.builtin.template:
    src: cloud.conf.j2
    dest: "/var/lib/yake/cloud.{{ clusterapi_cluster_name }}.conf"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644

- name: Slurp cloud.conf file
  ansible.builtin.slurp:
    src: "/var/lib/yake/cloud.{{ clusterapi_cluster_name }}.conf"
  register: register_cloud_conf

- name: Create cloud-config secret
  kubernetes.core.k8s:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    state: present
    wait: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloud-config
        namespace: kube-system
      type: Opaque
      stringData:
        cloud.conf: "{{ register_cloud_conf.content | b64decode }}"

- name: Copy CCM manifests
  ansible.builtin.copy:
    src: "cloud-controller-manager/{{ item }}"
    dest: "/var/lib/yake/{{ item }}"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644
  loop:
    - cloud-controller-manager-role-bindings.yaml
    - cloud-controller-manager-roles.yaml
    - openstack-cloud-controller-manager-ds.yaml

- name: Apply CCM manifests
  kubernetes.core.k8s:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    state: present
    src: "/var/lib/yake/{{ item }}"
  loop:
    - cloud-controller-manager-role-bindings.yaml
    - cloud-controller-manager-roles.yaml
    - openstack-cloud-controller-manager-ds.yaml

- name: Wait for coredns pods
  kubernetes.core.k8s_info:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    kind: Pod
    namespace: kube-system
  register: coredns_pods
  until: >
    coredns_pods.resources is defined and
    (
      coredns_pods.resources
      | selectattr('metadata.labels', 'defined')
      | selectattr('metadata.labels.k8s-app', 'defined')
      | selectattr('metadata.labels.k8s-app', 'equalto', 'kube-dns')
      | selectattr('status.phase', 'equalto', 'Running')
      | list | length ==
      coredns_pods.resources
      | selectattr('metadata.labels', 'defined')
      | selectattr('metadata.labels.k8s-app', 'defined')
      | selectattr('metadata.labels.k8s-app', 'equalto', 'kube-dns')
      | list | length
    )
  retries: 30
  delay: 10

- name: Copy CSI manifests
  ansible.builtin.copy:
    src: "cinder-csi/{{ item }}"
    dest: "/var/lib/yake/{{ item }}"
    owner: "{{ clusterapi_cluster_uid }}"
    group: "{{ clusterapi_cluster_gid }}"
    mode: 0644
  loop:
    - cinder-csi-controllerplugin-rbac.yaml
    - cinder-csi-controllerplugin.yaml
    - cinder-csi-nodeplugin-rbac.yaml
    - cinder-csi-nodeplugin.yaml
    - csi-cinder-driver.yaml

- name: Apply CSI manifests
  kubernetes.core.k8s:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    state: present
    src: "/var/lib/yake/{{ item }}"
  loop:
    - cinder-csi-controllerplugin-rbac.yaml
    - cinder-csi-controllerplugin.yaml
    - cinder-csi-nodeplugin-rbac.yaml
    - cinder-csi-nodeplugin.yaml
    - csi-cinder-driver.yaml

- name: Pause for 10 seconds
  ansible.builtin.pause:
    seconds: 10

- name: Wait for CSI pods
  kubernetes.core.k8s_info:
    kubeconfig: "/var/lib/yake/kubeconfig.{{ clusterapi_cluster_name }}"
    kind: Pod
    namespace: kube-system
  register: csi_pods
  until: >
    csi_pods.resources is defined and
    (
      csi_pods.resources
      | selectattr('metadata.labels', 'defined')
      | selectattr('metadata.labels.app', 'defined')
      | selectattr('metadata.labels.app', 'equalto', 'csi-cinder-nodeplugin')
      | selectattr('status.phase', 'equalto', 'Running')
      | list | length ==
      csi_pods.resources
      | selectattr('metadata.labels', 'defined')
      | selectattr('metadata.labels.app', 'defined')
      | selectattr('metadata.labels.app', 'equalto', 'csi-cinder-nodeplugin')
      | list | length
    )
  retries: 30
  delay: 10
